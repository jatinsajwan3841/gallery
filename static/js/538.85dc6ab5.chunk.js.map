{"version":3,"file":"static/js/538.85dc6ab5.chunk.js","mappings":"2SAsSA,UAtRe,WACX,IAAMA,GAAWC,EAAAA,EAAAA,MAIXC,EAAmBC,EAAAA,GAAW,CAChCC,UAAWD,EAAAA,GACC,yBACPE,IAAI,EAAG,sCACPC,SAAS,0BACdC,SAAUJ,EAAAA,GACE,wBACPE,IAAI,EAAG,sCACPC,SAAS,yBACdE,SAAUL,EAAAA,GACE,wBACPE,IAAI,EAAG,sCACPC,SAAS,yBACTG,KACG,kBACA,0BAAyB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACzB,SAAAC,EAAgCC,GAAK,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAENC,EAAAA,EAAAA,IAAU,wCAADC,OACYN,IAC1C,KAAD,EAFa,KAAAE,EAAAK,KAIDC,KAAKC,MAAQ,GAAC,CAAAP,EAAAE,KAAA,eAAAF,EAAAQ,OAAA,UAAS,GAAK,cAAAR,EAAAQ,OAAA,UAClC,GAAI,OAEQ,OAFRR,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEXU,QAAQC,IAAGX,EAAAS,IAAQT,EAAAQ,OAAA,UACZ,GAAK,yBAAAR,EAAAY,OAAA,GAAAf,EAAA,kBAVW,OAY9B,SAZ8BgB,GAAA,OAAApB,EAAAqB,MAAC,KAADC,UAAA,EADN,IAejCC,MAAO9B,EAAAA,GACK,oBACP8B,MAAM,uBACN3B,SAAS,qBACTG,KACG,eACA,uBAAsB,eAAAyB,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MACtB,SAAAsB,EAA6BpB,GAAK,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEHC,EAAAA,EAAAA,IAAU,wCAADC,OACYN,IAC1C,KAAD,EAFa,KAAAqB,EAAAd,KAIDC,KAAKC,MAAQ,GAAC,CAAAY,EAAAjB,KAAA,eAAAiB,EAAAX,OAAA,UAAS,GAAK,cAAAW,EAAAX,OAAA,UAClC,GAAI,OAEQ,OAFRW,EAAAlB,KAAA,EAAAkB,EAAAV,GAAAU,EAAA,SAEXT,QAAQC,IAAGQ,EAAAV,IAAQU,EAAAX,OAAA,UACZ,GAAK,yBAAAW,EAAAP,OAAA,GAAAM,EAAA,kBAVQ,OAY3B,SAZ2BE,GAAA,OAAAH,EAAAH,MAAC,KAADC,UAAA,EADN,IAe9BM,SAAUnC,EAAAA,GACE,uBACPE,IAAI,EAAG,qDACPC,SAAS,wBACdiC,MAAOpC,EAAAA,KAEFG,SAAS,4BACTkC,QA5DL,0GA4D0B,6BACrBnC,IAAI,GAAI,aACRoC,IAAI,GAAI,cAGXC,EAAqB,CACvBtC,UAAW,GACXG,SAAU,GACVC,SAAU,GACVyB,MAAO,GACPK,SAAU,GACVC,MAAO,IAGLI,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAeH,EACfxC,iBAAkBA,EAClB4C,SAAS,WAAD,IAAAC,GAAApC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAmC,EAAOC,GAAM,IAAAC,EAAAC,EAAAC,EAAA7B,EAAA,OAAAX,EAAAA,EAAAA,KAAAI,MAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OAMwB,OAL3CQ,QAAQC,IAAIqB,GAAQI,EAAAnC,KAAA,EAEVgC,EAAS,CACXI,QAAS,CAAE,eAAgB,qBAEzBH,EAAWI,KAAKC,UAAUP,GAAOI,EAAAlC,KAAA,EAChBC,EAAAA,EAAAA,KAAW,kCAE9B+B,EACAD,GACF,KAAD,EAAAE,EAAAC,EAAA/B,KAJOC,EAAI6B,EAAJ7B,KAKRI,QAAQC,IAAIL,GACZkC,aAAaC,MAAM,eACnB1D,EAAS,KAAKqD,EAAAlC,KAAA,iBAAAkC,EAAAnC,KAAA,GAAAmC,EAAA3B,GAAA2B,EAAA,SAEd1B,QAAQC,IAAGyB,EAAA3B,IACXiC,MAAMN,EAAA3B,GAAMkC,SAASrC,KAAKsC,SAC1BlB,EAAOmB,eAAc,GAAO,yBAAAT,EAAAxB,OAAA,GAAAmB,EAAA,mBAEnC,gBAAAe,GAAA,OAAAhB,EAAAhB,MAAA,KAAAC,UAAA,EApBQ,KAuCb,OAhBAgC,EAAAA,WAAgB,WACEP,aAAaQ,QAAQ,UAE/BjE,EAAS,KAEb,IAAMkE,EAAQX,KAAKY,MAAMV,aAAaQ,QAAQ,gBAC1CC,GACAvB,EAAOyB,UAAUF,EAEzB,GAAG,IAEHF,EAAAA,WAAgB,WACRrB,EAAOM,SAAWP,GAClBe,aAAaY,QAAQ,cAAed,KAAKC,UAAUb,EAAOM,QAClE,GAAG,CAACN,EAAOM,UAGPqB,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,UAAU,OAAOC,SAAS,KAAIC,SAAA,EACrCC,EAAAA,EAAAA,KAACC,EAAAA,GAAW,KACZN,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CACAC,GAAI,CACAC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UACdR,SAAA,EAEFC,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CAACL,GAAI,CAAEM,EAAG,EAAGC,QAAS,kBAAmBX,UAC5CC,EAAAA,EAAAA,KAACW,EAAAA,EAAgB,OAErBX,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACf,UAAU,KAAKgB,QAAQ,KAAId,SAAC,aAGxCJ,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CACAL,UAAU,OACViB,YAAU,EACV3C,SAAUH,EAAO+C,aACjBZ,GAAI,CAAEa,GAAI,GAAIjB,SAAA,EAEdJ,EAAAA,EAAAA,MAACsB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEpB,SAAA,EACvBC,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEvB,UACrBC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACNC,aAAa,aACbC,KAAK,YACL9F,UAAQ,EACR+F,WAAS,EACTC,GAAG,YACHC,MAAM,aACNC,WAAS,EACTzF,MAAO4B,EAAOM,OAAO7C,UACrBqG,SAAU9D,EAAO+D,aACjBC,MACIhE,EAAOiE,QAAQxG,WACfuC,EAAOkE,OAAOzG,UAElB0G,WACInE,EAAOiE,QAAQxG,WACfuC,EAAOkE,OAAOzG,eAI1BuE,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEvB,UACrBC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACN5F,UAAQ,EACR+F,WAAS,EACTC,GAAG,WACHC,MAAM,YACNH,KAAK,WACLD,aAAa,cACbpF,MAAO4B,EAAOM,OAAO1C,SACrBkG,SAAU9D,EAAO+D,aACjBC,MACIhE,EAAOiE,QAAQrG,UACfoC,EAAOkE,OAAOtG,SAElBuG,WACInE,EAAOiE,QAAQrG,UACfoC,EAAOkE,OAAOtG,cAI1BoE,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGtB,UACdC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACN5F,UAAQ,EACR+F,WAAS,EACTC,GAAG,WACHC,MAAM,YACNH,KAAK,WACLD,aAAa,WACbpF,MAAO4B,EAAOM,OAAOzC,SACrBiG,SAAU9D,EAAO+D,aACjBC,MAAOhE,EAAOkE,OAAOrG,SACrBsG,WAAYnE,EAAOkE,OAAOrG,cAGlCmE,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGtB,UACdC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACN5F,UAAQ,EACR+F,WAAS,EACTC,GAAG,QACHC,MAAM,gBACNQ,KAAK,QACLX,KAAK,QACLD,aAAa,QACbpF,MAAO4B,EAAOM,OAAOhB,MACrBwE,SAAU9D,EAAO+D,aACjBC,MAAOhE,EAAOkE,OAAO5E,MACrB6E,WAAYnE,EAAOkE,OAAO5E,WAGlC0C,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGtB,UACdC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACN5F,UAAQ,EACR+F,WAAS,EACTD,KAAK,WACLG,MAAM,WACNQ,KAAK,WACLT,GAAG,WACHH,aAAa,eACbpF,MAAO4B,EAAOM,OAAOX,SACrBmE,SAAU9D,EAAO+D,aACjBC,MACIhE,EAAOiE,QAAQtE,UACfK,EAAOkE,OAAOvE,SAElBwE,WACInE,EAAOiE,QAAQtE,UACfK,EAAOkE,OAAOvE,cAI1BqC,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGtB,UACdC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACN5F,UAAQ,EACR+F,WAAS,EACTD,KAAK,QACLG,MAAM,QACNQ,KAAK,SACLT,GAAG,QACHH,aAAa,QACbpF,MAAO4B,EAAOM,OAAOV,MACrBkE,SAAU9D,EAAO+D,aACjBC,MACIhE,EAAOiE,QAAQrE,OAASI,EAAOkE,OAAOtE,MAE1CuE,WACInE,EAAOiE,QAAQrE,OAASI,EAAOkE,OAAOtE,cAKtDoC,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,CACHD,KAAK,SACLV,WAAS,EACTb,QAAQ,YACRV,GAAI,CAAEa,GAAI,EAAGsB,GAAI,GACjBC,SAAUvE,EAAOwE,aAAazC,SACjC,aAGDC,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,WAAS,EAACuB,eAAe,WAAU1C,UACrCC,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACG,MAAI,EAAArB,UACNC,EAAAA,EAAAA,KAAC0C,EAAAA,GAAK,CAACC,GAAG,SAAQ5C,UACdC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAI,CAAC/B,QAAQ,QAAOd,SAAC,mDAUtD,C","sources":["components/signUp/index.js"],"sourcesContent":["import React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Link from \"@mui/material/Link\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport { Link as Rlink, useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport axios from \"axios\";\n\nconst SignUp = () => {\n    const navigate = useNavigate();\n    const phoneRegExp =\n        /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\n    const validationSchema = yup.object({\n        firstName: yup\n            .string(\"Enter your first name\")\n            .min(3, \"must be at least 3 characters long\")\n            .required(\"First name is required\"),\n        lastName: yup\n            .string(\"Enter your last name\")\n            .min(3, \"must be at least 3 characters long\")\n            .required(\"Last name is required\"),\n        username: yup\n            .string(\"Enter your user name\")\n            .min(3, \"must be at least 3 characters long\")\n            .required(\"User name is required\")\n            .test(\n                \"Unique username\",\n                \"Username already in use\",\n                async function validateUserName(value) {\n                    try {\n                        const response = await axios.get(\n                            `https://dummyjson.com/users/search?q=${value}`\n                        );\n                        //console.log(response);\n                        if (response.data.total > 0) return false; // or true as you see fit\n                        return true;\n                    } catch (error) {\n                        console.log(error);\n                        return false;\n                    }\n                }\n            ),\n        email: yup\n            .string(\"Enter your email\")\n            .email(\"Enter a valid email\")\n            .required(\"Email is required\")\n            .test(\n                \"Unique Email\",\n                \"Email already in use\",\n                async function validateEmail(value) {\n                    try {\n                        const response = await axios.get(\n                            `https://dummyjson.com/users/search?q=${value}`\n                        );\n                        //console.log(response);\n                        if (response.data.total > 0) return false; // or true as you see fit\n                        return true;\n                    } catch (error) {\n                        console.log(error);\n                        return false;\n                    }\n                }\n            ),\n        password: yup\n            .string(\"Enter your password\")\n            .min(8, \"Password should be of minimum 8 characters length\")\n            .required(\"Password is required\"),\n        phone: yup\n            .string()\n            .required(\"Phone number is required\")\n            .matches(phoneRegExp, \"Phone number is not valid\")\n            .min(10, \"too short\")\n            .max(10, \"too long\"),\n    });\n\n    const blankInitialValues = {\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        phone: \"\",\n    };\n\n    const formik = useFormik({\n        initialValues: blankInitialValues,\n        validationSchema: validationSchema,\n        onSubmit: async (values) => {\n            console.log(values);\n            try {\n                const config = {\n                    headers: { \"Content-Type\": \"application/json\" },\n                };\n                const formData = JSON.stringify(values);\n                const { data } = await axios.post(\n                    `https://dummyjson.com/users/add`,\n                    formData,\n                    config\n                );\n                console.log(data);\n                localStorage.clear(\"signup_vals\");\n                navigate(\"/\");\n            } catch (error) {\n                console.log(error);\n                alert(error.response.data.message);\n                formik.setSubmitting(false);\n            }\n        },\n    });\n\n    React.useEffect(() => {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            navigate(\"/\");\n        }\n        const saved = JSON.parse(localStorage.getItem(\"signup_vals\"));\n        if (saved) {\n            formik.setValues(saved);\n        }\n    }, []);\n\n    React.useEffect(() => {\n        if (formik.values !== blankInitialValues)\n            localStorage.setItem(\"signup_vals\", JSON.stringify(formik.values));\n    }, [formik.values]);\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <Box\n                sx={{\n                    marginTop: 8,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                }}\n            >\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign up\n                </Typography>\n                <Box\n                    component=\"form\"\n                    noValidate\n                    onSubmit={formik.handleSubmit}\n                    sx={{ mt: 3 }}\n                >\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                autoComplete=\"given-name\"\n                                name=\"firstName\"\n                                required\n                                fullWidth\n                                id=\"firstName\"\n                                label=\"First Name\"\n                                autoFocus\n                                value={formik.values.firstName}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.firstName &&\n                                    formik.errors.firstName\n                                }\n                                helperText={\n                                    formik.touched.firstName &&\n                                    formik.errors.firstName\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"lastName\"\n                                label=\"Last Name\"\n                                name=\"lastName\"\n                                autoComplete=\"family-name\"\n                                value={formik.values.lastName}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.lastName &&\n                                    formik.errors.lastName\n                                }\n                                helperText={\n                                    formik.touched.lastName &&\n                                    formik.errors.lastName\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"username\"\n                                label=\"User Name\"\n                                name=\"username\"\n                                autoComplete=\"username\"\n                                value={formik.values.username}\n                                onChange={formik.handleChange}\n                                error={formik.errors.username}\n                                helperText={formik.errors.username}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                type=\"email\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                value={formik.values.email}\n                                onChange={formik.handleChange}\n                                error={formik.errors.email}\n                                helperText={formik.errors.email}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"new-password\"\n                                value={formik.values.password}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.password &&\n                                    formik.errors.password\n                                }\n                                helperText={\n                                    formik.touched.password &&\n                                    formik.errors.password\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                name=\"phone\"\n                                label=\"Phone\"\n                                type=\"number\"\n                                id=\"phone\"\n                                autoComplete=\"phone\"\n                                value={formik.values.phone}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.phone && formik.errors.phone\n                                }\n                                helperText={\n                                    formik.touched.phone && formik.errors.phone\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{ mt: 3, mb: 2 }}\n                        disabled={formik.isSubmitting}\n                    >\n                        Sign Up\n                    </Button>\n                    <Grid container justifyContent=\"flex-end\">\n                        <Grid item>\n                            <Rlink to=\"signin\">\n                                <Link variant=\"body2\">\n                                    Already have an account? Sign in\n                                </Link>\n                            </Rlink>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box>\n        </Container>\n    );\n};\n\nexport default SignUp;\n"],"names":["navigate","useNavigate","validationSchema","yup","firstName","min","required","lastName","username","test","_validateUserName","_asyncToGenerator","_regeneratorRuntime","mark","_callee","value","wrap","_context","prev","next","axios","concat","sent","data","total","abrupt","t0","console","log","stop","_x","apply","arguments","email","_validateEmail","_callee2","_context2","_x2","password","phone","matches","max","blankInitialValues","formik","useFormik","initialValues","onSubmit","_onSubmit","_callee3","values","config","formData","_yield$axios$post","_context3","headers","JSON","stringify","localStorage","clear","alert","response","message","setSubmitting","_x3","React","getItem","saved","parse","setValues","setItem","_jsxs","Container","component","maxWidth","children","_jsx","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","noValidate","handleSubmit","mt","Grid","container","spacing","item","xs","sm","TextField","autoComplete","name","fullWidth","id","label","autoFocus","onChange","handleChange","error","touched","errors","helperText","type","Button","mb","disabled","isSubmitting","justifyContent","Rlink","to","Link"],"sourceRoot":""}