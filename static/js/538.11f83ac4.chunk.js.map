{"version":3,"file":"static/js/538.11f83ac4.chunk.js","mappings":"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","sources":["components/signUp/index.js"],"sourcesContent":["import React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Link from \"@mui/material/Link\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport { Link as Rlink } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport axios from \"axios\";\n\nconst SignUp = () => {\n    /*const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        console.log({\n            email: data.get(\"email\"),\n            password: data.get(\"password\"),\n        });\n    };*/\n\n    const phoneRegExp =\n        /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\n    const validationSchema = yup.object({\n        firstName: yup\n            .string(\"Enter your first name\")\n            .min(3, \"must be at least 3 characters long\")\n            .required(\"First name is required\"),\n        lastName: yup\n            .string(\"Enter your last name\")\n            .min(3, \"must be at least 3 characters long\")\n            .required(\"Last name is required\"),\n        username: yup\n            .string(\"Enter your user name\")\n            .min(3, \"must be at least 3 characters long\")\n            .required(\"User name is required\")\n            .test(\n                \"Unique username\",\n                \"Username already in use\", // <- key, message\n                function (value) {\n                    return new Promise((resolve, reject) => {\n                        axios\n                            .get(\n                                `http://localhost:8003/api/u/user/${value}/available`\n                            )\n                            .then((res) => {\n                                resolve(true);\n                            })\n                            .catch((error) => {\n                                if (\n                                    error.response.data.content ===\n                                    \"The username has already been taken.\"\n                                ) {\n                                    resolve(false);\n                                }\n                            });\n                    });\n                }\n            ),\n        email: yup\n            .string(\"Enter your email\")\n            .email(\"Enter a valid email\")\n            .required(\"Email is required\")\n            .test(\n                \"Unique Email\",\n                \"Email already in use\", // <- key, message\n                function (value) {\n                    return new Promise((resolve, reject) => {\n                        axios\n                            .get(\n                                `http://localhost:8003/api/u/user/${value}/available`\n                            )\n                            .then((res) => {\n                                resolve(true);\n                            })\n                            .catch((error) => {\n                                if (\n                                    error.response.data.content ===\n                                    \"The email has already been taken.\"\n                                ) {\n                                    resolve(false);\n                                }\n                            });\n                    });\n                }\n            ),\n        password: yup\n            .string(\"Enter your password\")\n            .min(8, \"Password should be of minimum 8 characters length\")\n            .required(\"Password is required\"),\n        phone: yup\n            .string()\n            .required(\"Phone number is required\")\n            .matches(phoneRegExp, \"Phone number is not valid\")\n            .min(10, \"too short\")\n            .max(10, \"too long\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {},\n        validationSchema: validationSchema,\n        onSubmit: (values) => {\n            alert(JSON.stringify(values, null, 2));\n        },\n    });\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <Box\n                sx={{\n                    marginTop: 8,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                }}\n            >\n                <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign up\n                </Typography>\n                <Box\n                    component=\"form\"\n                    noValidate\n                    onSubmit={formik.handleSubmit}\n                    sx={{ mt: 3 }}\n                >\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                autoComplete=\"given-name\"\n                                name=\"firstName\"\n                                required\n                                fullWidth\n                                id=\"firstName\"\n                                label=\"First Name\"\n                                autoFocus\n                                value={formik.values.firstName}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.firstName &&\n                                    formik.errors.firstName\n                                }\n                                helperText={\n                                    formik.touched.firstName &&\n                                    formik.errors.firstName\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"lastName\"\n                                label=\"Last Name\"\n                                name=\"lastName\"\n                                autoComplete=\"family-name\"\n                                value={formik.values.lastName}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.lastName &&\n                                    formik.errors.lastName\n                                }\n                                helperText={\n                                    formik.touched.lastName &&\n                                    formik.errors.lastName\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"username\"\n                                label=\"User Name\"\n                                name=\"username\"\n                                autoComplete=\"username\"\n                                value={formik.values.username}\n                                onBlur={formik.handleChange}\n                                error={\n                                    formik.touched.username &&\n                                    formik.errors.username\n                                }\n                                helperText={\n                                    formik.touched.username &&\n                                    formik.errors.username\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                type=\"email\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                value={formik.values.email}\n                                onBlur={formik.handleChange}\n                                error={\n                                    formik.touched.email && formik.errors.email\n                                }\n                                helperText={\n                                    formik.touched.email && formik.errors.email\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"new-password\"\n                                value={formik.values.password}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.password &&\n                                    formik.errors.password\n                                }\n                                helperText={\n                                    formik.touched.password &&\n                                    formik.errors.password\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                name=\"phone\"\n                                label=\"Phone\"\n                                type=\"number\"\n                                id=\"phone\"\n                                autoComplete=\"phone\"\n                                value={formik.values.phone}\n                                onChange={formik.handleChange}\n                                error={\n                                    formik.touched.phone && formik.errors.phone\n                                }\n                                helperText={\n                                    formik.touched.phone && formik.errors.phone\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{ mt: 3, mb: 2 }}\n                        disabled={formik.isSubmitting}\n                    >\n                        Sign Up\n                    </Button>\n                    <Grid container justifyContent=\"flex-end\">\n                        <Grid item>\n                            <Rlink to=\"signin\">\n                                <Link variant=\"body2\">\n                                    Already have an account? Sign in\n                                </Link>\n                            </Rlink>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box>\n        </Container>\n    );\n};\n\nexport default SignUp;\n"],"names":["validationSchema","yup","firstName","min","required","lastName","username","test","value","Promise","resolve","reject","axios","concat","then","res","catch","error","response","data","content","email","password","phone","matches","max","formik","useFormik","initialValues","onSubmit","values","alert","JSON","stringify","_jsxs","Container","component","maxWidth","children","_jsx","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","noValidate","handleSubmit","mt","Grid","container","spacing","item","xs","sm","TextField","autoComplete","name","fullWidth","id","label","autoFocus","onChange","handleChange","touched","errors","helperText","onBlur","type","Button","mb","disabled","isSubmitting","justifyContent","Rlink","to","Link"],"sourceRoot":""}